from manimlib.imports import *


class OM4P2(Scene):
    CONFIG = {
        "camera_config": {
            "background_color": WHITE
        },
    }

    def construct(self):
        self.wait()
        A = Dot([-1.07, 4.35, 0], color=RED_E, radius=0.06)
        B = Dot([-3.49, -1.68, 0], color=RED_E, radius=0.06)
        C = Dot([6.16, -2.89, 0], color=RED_E, radius=0.06)
        HA = Dot([-1.86, -1.88, 0], color=RED_E, radius=0.06)
        HB = Dot([0.73, 2.54, 0], color=RED_E, radius=0.06)
        HC = Dot([-2.57, 0.62, 0], color=RED_E, radius=0.06)
        H = Dot([-1.59, 0.22, 0], color=RED_E)
        GA = Dot([1.33, -2.28, 0], color=RED_E, radius=0.06)
        GB = Dot([2.54, 0.73, 0], color=RED_E, radius=0.06)
        GC = Dot([-2.28, 1.33, 0], color=RED_E, radius=0.06)
        G = Dot([0.53, -0.07, 0], color=RED_E)
        O = Dot([1.59, -0.22, 0], color=RED_E)
        gg = VGroup(A, B, C, HA, HB, HC, H, GA, GB, GC, G, O)
        gg.shift(LEFT + DOWN * 0.5)
        tr1 = self.Triangle(A, B, C)
        AHA = self.fl(A, HA, BLUE_E)
        BHB = self.fl(B, HB, BLUE_E)
        CHC = self.fl(C, HC, BLUE_E)
        thg = VGroup(AHA, BHB, CHC)
        AGA = self.fl(A, GA, BLUE_E)
        BGB = self.fl(B, GB, BLUE_E)
        CGC = self.fl(C, GC, BLUE_E)
        tgg = VGroup(AGA, BGB, CGC)
        GAO = self.fl(GA, O, BLUE_E)
        GBO = self.fl(GB, O, BLUE_E)
        GCO = self.fl(GC, O, BLUE_E)
        ogg = VGroup(GAO, GBO, GCO)
        HO = self.fl(H, O, GREEN_E)
        tempg1 = VGroup(tr1, thg, tgg, ogg, H, G, O)
        self.play(FadeIn(tempg1))
        self.wait(0.5)
        self.play(FadeIn(HO))
        self.wait(2)

        Ni = Dot([0, 0, 0], color=BLACK).shift(LEFT + DOWN * 0.5)
        KA = Dot([-1.33, 2.28, 0], color=RED_E, radius=0.06)
        KB = Dot([-2.54, -0.73, 0], color=RED_E, radius=0.06)
        KC = Dot([2.28, -1.33, 0], color=RED_E, radius=0.06)
        kg = VGroup(KA, KB, KC)
        kg.shift(LEFT + DOWN * 0.5)
        dotg = VGroup(HA, HB, HC, GA, GB, GC)
        c1 = Circle(radius=2.64, color=GREEN_E, stroke_width=2.5).shift(LEFT + DOWN * 0.5)
        t1 = TextMobject("我们取各顶点到垂心线段的中点", color=BLACK).scale(0.7).next_to([-6, -3, 0])
        t2 = TextMobject("再将各垂足和各边中点标出来", color=BLACK).scale(0.7).next_to([-6, -3, 0])
        t3 = TextMobject("我们发现这九点在同一个圆上", color=BLACK).scale(0.7).next_to([-6, -3, 0])
        t4 = TextMobject("这个圆称作九点圆，它还有很多神奇的性质", color=BLACK).scale(0.7).next_to([-6, -3, 0])
        self.play(Write(t1))
        self.wait()
        self.play(ShowCreation(kg), run_time=1, rate_func=linear)
        self.wait()
        self.play(ReplacementTransform(t1, t2))
        self.wait()
        self.play(ShowCreation(dotg), run_time=1, rate_func=linear)
        self.wait()
        self.play(ReplacementTransform(t2, t3))
        self.play(ShowCreation(c1), run_time=3, rate_func=linear)
        self.wait()
        self.play(ReplacementTransform(t3, t4))
        self.wait(2)
        self.play(Uncreate(t4))
        tempg2 = VGroup(thg, tgg, ogg, HA, HB, HC, GA, GB, GC, KA, KB, KC)
        self.play(FadeOut(tempg2))
        self.wait()

        t5 = TextMobject("性质1：九点圆圆心在欧拉线上，且为垂心外心连线的中点", color=BLACK).scale(0.7)
        t6 = TextMobject("性质2：九点圆的半径是外接圆半径的一半", color=BLACK).scale(0.7)
        t7 = TextMobject("性质3：九点圆与内切圆、旁切圆相切", color=BLACK).scale(0.7)
        self.play(FadeInFromLarge(t5))
        self.play(t5.shift, UP * 3)
        self.play(ShowCreation(Ni))
        self.wait()
        self.play(FadeOut(t5))
        self.wait()

        c2 = Circle(radius=5.29, color=GREEN_E, stroke_width=2.5).shift(LEFT + DOWN * 0.5).shift(
            RIGHT * 1.59 + DOWN * 0.22)
        P = Dot([3.05, 4.86, 0], color=RED_E).shift(LEFT + DOWN * 0.5)
        alg = VGroup(tr1, H, G, O, HO, Ni, HB, c1, c2, P)
        self.play(FadeInFromLarge(t6))
        self.play(t6.shift, UP * 3)
        self.wait()
        self.play(ShowCreation(c2))
        self.play(ShowCreation(HB))
        self.play(alg.scale, 0.6)
        NiHB = self.fl(Ni, HB, RED_B)
        OP = self.fl(O, P, RED)
        self.wait()
        self.play(ShowCreation(NiHB))
        self.play(ShowCreation(OP))
        self.wait()
        ng = VGroup(NiHB, HB)
        self.play(ng.shift, RIGHT * 1.59 * 0.6 + DOWN * 0.22 * 0.6)
        self.wait()
        self.play(FadeOut(t6))
        alg2 = VGroup(Ni, HB, H, G, O, HO, P, NiHB, OP, c2)
        self.play(FadeOut(alg2))

        self.play(FadeInFromLarge(t7))
        self.play(t7.shift, UP * 3)
        self.wait()
        tc1 = Circle(arc_center=Ni.get_center() + np.array([-0.23 * 0.6, 0.24 * 0.6, 0]), radius=2.31 * 0.6)
        tc2 = Circle(arc_center=Ni.get_center() + np.array([-6.4 * 0.6, 3.26 * 0.6, 0]), radius=4.54 * 0.6)
        tc3 = Circle(arc_center=Ni.get_center() + np.array([10.9 * 0.6, 6.8 * 0.6, 0]), radius=10.2 * 0.6)
        tc4 = Circle(arc_center=Ni.get_center() + np.array([2.1 * 0.6, -11.18 * 0.6, 0]), radius=8.73 * 0.6)
        pg = VGroup(tc2, tc3, tc4)
        self.play(ShowCreation(tc1), run_time=1, rate_func=linear)
        l1=Line(Ni.get_center()+[-5.7*0.6,8.97*0.6,0],Ni.get_center()+[12.89*0.6,-9.62*0.6,0],color=GREEN_B,stroke_width=2.5)
        l2=Line(Ni.get_center()+[-9.72*0.6,-0.9*0.6,0],Ni.get_center()+[13.2*0.6,-3.77*0.6,0],color=GREEN_B,stroke_width=2.5)
        l3=Line(Ni.get_center()+[-7.76*0.6,-12.31*0.6,0],Ni.get_center()+[2.83*0.6,14.08*0.6,0],color=GREEN_B,stroke_width=2.5)
        lg=VGroup(l1,l2,l3)
        self.play(ShowCreation(lg),rate_func=linear)
        self.wait()
        self.play(ShowCreation(pg), run_time=3, rate_func=linear)
        alg3=VGroup(tr1,c1,tc1,pg,lg)
        self.play(alg3.scale,0.3)
        self.play(alg3.shift,LEFT*2+UP*1)
        self.wait()
        self.play(FadeOut(t7))
        self.wait(2)

    def Triangle(self, X, Y, Z):
        return Polygon(X.get_center(), Y.get_center(), Z.get_center(), color=GREEN_B)

    def fl(self, X, Y, Z):
        return Line(X.get_center(), Y.get_center(), color=Z, stroke_width=3)
